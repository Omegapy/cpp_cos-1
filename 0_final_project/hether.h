
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
 /*--------------------------------****************************************----------------------------------
  |                                *                                      *                                 |
  |   Erter's Quest                *            Headers Lib. Files        *                                 |
  |                                *                                      *                                 |
  ---------------------------------****************************************----------------------------------*/
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*

  Contains 


*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef HETHER_H
#define HETHER_H

	#ifdef _MSC_VER
		#pragma once
	#endif  // _MSC_VER


#include <iostream> // For debugging purposes
#include <string>
// Multimedia Library Graphic
#include <SFML/Graphics.hpp> // https://www.sfml-dev.org
#include <SFML/Audio.hpp> 
#include <vector>

using namespace std;
using namespace sf; // SFML

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
 /*--------------------------------****************************************----------------------------------
  |                                *                                      *                                 |
  |                                *	        Global Variables          *                                 |
  |                                *                                      *                                 |
  ---------------------------------****************************************----------------------------------*/
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*------------------------------
 |                             |
 |  Instance state enumerator  |
 |                             |
 ------------------------------*/
enum INST_TYPE { QUEST = 0, MONSTER, DIRECTION, PLACE };


/*--------------------------------
 |                               |
 |  Instance returns enumerator  |
 |                               |
 --------------------------------*/
enum INST_RESULTS { EXIT = 0, LEFT, RIGHT, ACCEPT, REJECT, CONTINUE, FIGHT, PLAYER_DEAD, MONSTER_DEAD, PLAYER_HITS, MONSTER_HITS, PLAYER_MISS, MONSTER_MISS };


/*------------------------------
 |                             |
 |  Player state enumerator    |
 |                             |
 ------------------------------*/
enum PLAYER_STATE { HEALTH = 0, ARMOR, STRENGTH };


// player Character
struct Ether {
	int health = 250;
	int armor = 200;
	int strength = 21;
};

/*------------------------------
 |                             |
 |  Window size enumerator    |
 |                             |
 ------------------------------*/
enum ORIGINAL_WINDOW_SIZE { O_WIN_WD = 1279, O_WIN_HT = 713 };


#endif