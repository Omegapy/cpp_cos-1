/*
COSC 1030 – Computer Science 1
Professor: David Durbin
Student : Alejandro (Alex) Ricciardi
Due date : 10 / 35 / 2022
Sorting and Searching pt. 1

1. Sales

A small yard supply store has recently started selling new items. Write a program that lets the owner track which items are selling well and which ones are not. 
The items are as follows: clock radios, grills, umbrellas, patio furniture, holiday decorations, candy bars, garden gnomes and pet supplies.
The program should use two parallel arrays; an array of strings that holds the product names and an array of integers that holds the number of items sold during the past month for each type.
The names should be stored using an initialization list at the time the name array is created.
The program should prompt the user to enter the number of items sold for each type.  
Once the sales data has been entered, the program should produce a report that displays sales for each item type, total sales, 
and the names of the highest selling and lowest selling products.
Yes, I am well aware that grills will not sell as well as candy bars. This assignment is not designed to reflect reality.

*If you wish to use vectors in place of the arrays you may, be aware that vectors are much more difficult to sort.

INPUT VALIDATION: Do not accept negative values for the number of items sold.

Output Example:

My Lawn Co. Sales Figures:

--------------------------------

Clock Radios:			30 units sold
Grills:					 7 units sold
Umbrellas:				12 units sold
Patio Furniture:		10 sets sold
Holiday Decorations:	28 units sold
Candy Bars:			   132 units sold
Garden Gnomes:          17 units sold
Pet Supplies:			39 units sold

--------------------------------

Total Items Sold: 275 Units Sold

--------------------------------

Highest Selling Product: Candy Bars
Lowest Selling Product:  Grills


 Sorting and Searching Rubric (1) Grading:
		Sales: .CPP File
			25 pts
			Program runs without errors or corrections.
			15 pts
			Program runs, but has minor errors or needs corrections to run.
			0 pts
			No Marks
		Sales: Comments
			Proper levels of commenting.
			Functions are given at least simple descriptions, purposes/uses of loops and conditionals are given at least simple descriptions.
			15 pts
			Acceptable levels of comments in most areas.
			8 pts
			Minor commenting done; or only bare details provided.
			0 pts
			No Marks
		Sales: Screen Capture
			10 pts
			Full Marks
			0 pts
			No Marks
Total possible points: 50


Note: not required by the assignment, I decided to utilize pointers and structures.

*/

#include <iostream>
#include <string>
#include <vector>

using namespace std;

// -- Global Structure
// Data structure used to for storing the names and the numbers of the items sold.
// Utized by main(), input_num_itmes_sold(), display_items_sold(), and find_max_min().
struct table_of_items {
	vector<string> names = { "Clock Radios", "Grills","Umbrellas", "Patio Furniture", "Holiday Decorations", "Candy Bars","Garden Gnomes","Pet Supplies" };
	vector<int> quantities;
};


// ----------------------------------------------------------------- Functions declaration


// Counts the number of digits in an integer,
// takes an integer as an argument
// and returns the number of digits in the integer.
int digits_in_int(int num);

// Accepts and validates the user input if it is not a negative integer  (N >= 0),
// takes a string as an argument (question to be displayed), and returns the validated integer input,
int not_negative_int_check_input(string question);

// Accepts and validates the user's inputs number of items, 
// takes a structure table_of_items pointer.
void input_num_itmes_sold(table_of_items *table_items);

// Displays the items names and quantities sold, displays and computes the total of items sold,
// takes a structure table_of_items pointer.
void display_items_sold(table_of_items *table_items);

// 	Finds maximum and minimum quantities values' names, takes a structure table_of_items pointer,
// and returns maximumand minimum quantities values' names.
vector<vector<string>> find_max_min(table_of_items* table_items);

// Displays the maxand minimum quantities items',
// and takes a 2d string vector generated by find_max_min().
void display_max_min_items_names(vector<vector<string>> max_min_names);


// ------------------------------------------------------------------ Program
int main() {


	// Creates a pointer and initializes a table of sold items with the table_of_items structure
	// Utized by input_num_itmes_sold(), display_items_sold(), and find_max_min()
	table_of_items *items, items_sold;
	items = &items_sold; // Table ref. memory address 
	
	// Banner
	cout << "\n                              **********************\n                              * The Yard Depot Co. *\n                              **********************\n\n";
	cout << "   This program track which The Yard Depot Co. items are selling well and which ones are not.\n\n";

	input_num_itmes_sold(items);
	display_items_sold(items);
	display_max_min_items_names(find_max_min(items));
	
	return 0;
}

// ----------------------------------------------------------------- Functions


int digits_in_int(int num) {

	/*
	
	Counts the number of digits in an integer,
	takes an integer as an argument 
	and returns the number of digits in the integer
	
	*/

	return to_string(num).size();
}

int not_negative_int_check_input(string question) {

	/*

	Accepts and validates the user input if it is not a negative integer  (N >= 0)
	takes a string as an argument (question to be displayed),
	and returns the validated integer input.

	*/

	// -- Local variables
	int user_input;
	char check_input_char;

	cout << "   " << question;

	do { // Validation loop, checks if the user input is an integer
		cin >> user_input;
		cin.get(check_input_char); // Gets the first non-digit character, if no non-digit character were found it returns an empty line, 
		// note that '.' in decimals inputs is a non-digit character.
		if (check_input_char != '\n') { // If the character check is not empty an error message is displayed
			cout << "\n   -- The entered input is not a valid input. The input should be an integer. --\n   " << question;
			cin.clear(); // clears any error flag on cin
			cin.ignore(1000, '\n'); // ignore anything else on the same line as the non-number so that it does not cause another parse failure
		}
		else if (user_input < 0) { // If the user_input < 0 an error message is displayed
			cout << "\n   -- The entered integer is not a valid input. The integer should be positive or equal to 0. --\n   " << question;
		} 
		else { 
			break; // Input is an positive integer or equal to 0
		}
	} while (true); // True if the input is not a positive integer or equal to 0

	return user_input;
}

void input_num_itmes_sold(table_of_items *table_items) {
	
	/*
	
	Accepts and validates the user's inputs number of items, 
	takes a structure table_of_items pointer.
	
	*/

	for (int i=0; i < (*table_items).names.size(); i++) { // Ask user to enter the quantity of items sold per item
		// If the item's name is not 'Patio Furniture' then display the name of the items and 'number of' in question else display 'Patio Furniture' and 'number of sets of' in question
		((*table_items).names[i] != "Patio Furniture") ? (*table_items).quantities.push_back(not_negative_int_check_input("Please enter the number of " + (*table_items).names[i] + " sold: "))
											  : (*table_items).quantities.push_back(not_negative_int_check_input("Please enter the number of sets of " + (*table_items).names[i] + " sold: "));
	}
}


void display_items_sold(table_of_items *table_items) {

	/*
	
	Displays the items names and quantities sold,
	displays and computes the total of items sold,
	takes a structure table_of_items pointer.
	
	*/

	// Local variable
	int most_digits_in_quantity = 0, // Stores the most number of digits in the quantity integer values
		total_items_sold = 0;
	string spaces, num_to_right_spaces; // Keeps track of spaces between names and quantities

	for (int i = 0; i < (*table_items).names.size(); i++) { // Finds the most number of digits in the quantity integer values
		if (most_digits_in_quantity < digits_in_int((*table_items).quantities[i])) { most_digits_in_quantity = digits_in_int((*table_items).quantities[i]); }
	}

	cout << "\n\n   The Yard Depot Co. Figures:\n   -------------------------------------------------------------\n";

	// Display the names and quantities of items sold and computes the total_items_sold
	for (int i = 0; i < (*table_items).names.size(); i++) { // Display the names and quanties of items sold 
		
		spaces = " ";
		// Computes the numbers of spaces need to allign the items quantity value related to the lenght of item's name 
		for (int j = 0; j < 20 - (*table_items).names[i].size(); j++) {
			spaces +=  " ";
		}

		num_to_right_spaces = " ";
		// Computes the numbers of spaces need to allign the right the items quantity value related to 
		// the most number of digits in the quantity integer values.
		for (int j = 0; j < most_digits_in_quantity - digits_in_int((*table_items).quantities[i]); j++) {
			num_to_right_spaces += " ";
		}

		if ((*table_items).names[i] != "Patio Furniture") { // If the item's name is not 'Patio Furniture' then display the name of the items and the number of 'units sold'
			cout << "\n   " + (*table_items).names[i] + ":" + spaces + num_to_right_spaces << (*table_items).quantities[i] << " units sold";
		}
		else { // If the item's name is 'Patio Furniture' then display 'Patio Furniture' and and the number of 'sets sold'
			cout << "\n   " + (*table_items).names[i] + ":" + spaces + num_to_right_spaces << (*table_items).quantities[i] << "  sets sold";
		}

		total_items_sold += (*table_items).quantities[i];
	}

	cout << "\n\n   -------------------------------------------------------------\n\n   Total Items Sold: " << total_items_sold 
		<< " Units Sold\n\n   -------------------------------------------------------------\n";

}

vector<vector<string>> find_max_min(table_of_items* table_items) {

	/*

	Finds maximum and minimum quantities values' names
	takes a structure table_of_items pointer,
	returns maximum and minimum quantities values' names

	*/

	// -- Vector
	// Stores the maximum and minimum quantities values items' names
	vector<vector<string>> max_min_names;
	// The vector is initialized with the first quantity item's name
	max_min_names.push_back({ (*table_items).names[0] });
	max_min_names.push_back({ (*table_items).names[0] });

	//-- Local variable 
	// Stores the maximum and minimum quantity, the variables are initialized with the first quantity value
	int max_value = (*table_items).quantities[0], mini_value = (*table_items).quantities[0];
	
	// Finds the maximum and minimum quantities values' names
	for (int i = 1; i < (*table_items).names.size(); i++) { 
		if (max_value < (*table_items).quantities[i]) { // Checks if the item's quantity value is bigger than the max value
			max_value = (*table_items).quantities[i]; // if true the item's quantity value becomes the max value 
			// Clears the old stores item's names and stores the new item's name associated with the max value
			max_min_names[0].clear();
			max_min_names[0].push_back((*table_items).names[i]);
		} // Finds duplicated max value if it exists
		else if (max_value == (*table_items).quantities[i]) { // Checks if the item's quantity value is equal to the max value
			max_min_names[0].push_back((*table_items).names[i]); // if true stores the new item's name associated with the max value
		}
		else if (mini_value > (*table_items).quantities[i]) { // Checks if the item's quantity value is smaller than the minimum value
			mini_value = (*table_items).quantities[i]; // if true the item's quantity value becomes the minimum value
			// Clears the old stores item's names and stores the new item's name associated with the minimum value
			max_min_names[1].clear();
			max_min_names[1].push_back((*table_items).names[i]);
		} // Finds dupilcated minimum value if it exists
		else if (mini_value == (*table_items).quantities[i]) { // Checks if the item's quantity value is equal to the minimum value
			max_min_names[1].push_back((*table_items).names[i]); // if true stores the new item's name associated with the minimum value
		}
	}
	return max_min_names;
}


void display_max_min_items_names(vector<vector<string>> max_min_names) {

	/*

	Displays the max and minimum quantities items',
	takes a 2d string vector generated by find_max_min().

	*/

	cout << "\n   Highest Selling Product(s):  ";
	// Displays the Highest Selling Product(s), 
	// note that several products can have the same quantity of items sold 
	// and the quantity can be the highest quantity sold overall
	for (int i = 0; i < max_min_names[0].size(); i++) {
		cout << max_min_names[0][i];
		if (max_min_names[0].size() != i + 1) { cout << ", "; } // Displays a ',' if the item's name is not the last object in the vector
	}

	cout << "\n   Lowest Selling Product(s):   ";
	// Displays the Lowest Selling Product(s), 
	// note that several products can have the same quantity of items sold 
	// and the quantity can be the lowest quantity sold overall
	for (int i = 0; i < max_min_names[1].size(); i++) {
		cout << max_min_names[1][i];
		if (max_min_names[1].size() != i + 1) { cout << ", "; } // Displays a ',' if the item's name is not the last object in the vector
	}

	cout << "\n\n   -------------------------------------------------------------\n" << endl;
}

